<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:sqs="http://www.mulesoft.org/schema/mule/sqs" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/sqs http://www.mulesoft.org/schema/mule/sqs/current/mule-sqs.xsd">
	<flow name="pub_flow_temperature" doc:id="a0d1b31c-f209-42f1-8fed-3d8839b666f2" >
		<scheduler doc:name="Scheduler" doc:id="ba4ca5b6-2b1d-4802-b4bb-0d3c4d200756" >
			<scheduling-strategy >
				<fixed-frequency frequency="30" timeUnit="MINUTES"/>
			</scheduling-strategy>
		</scheduler>
		<foreach doc:name="For Each" doc:id="9bcca4d3-d0c1-4348-aeb7-5cb27b9716fa" collection="#[(p('weather.cities') default '') splitBy ',']">
			<set-variable doc:name="Set Variable" doc:id="0ee451b3-55b6-430a-a190-dd685c71b49e" variableName="city" value="#[payload]"/>
			<set-variable value="#[p('weather.cities') splitBy ',' indexOf(payload)]" doc:name="Set Variable" doc:id="1294942f-f905-4b1d-a106-e3ebb0fff012" variableName="cityIndex" />
			<set-variable value="#[payload]" doc:name="Set Variable" doc:id="4dd85f34-16f2-48e7-9c43-45a3fd1d6087" variableName="cityName"/>
			<set-variable value="#[(p('weather.latitudes') splitBy ',')[vars.cityIndex] as Number]" doc:name="Set Variable" doc:id="f5fedcd9-1c3a-46a3-8ee9-9ef892700f30" variableName="latitude"/>
			<set-variable value="#[(p('weather.longitudes') splitBy ',')[vars.cityIndex] as Number]" doc:name="Set Variable" doc:id="8e011da4-6285-48b2-bd14-9e9522d088be" variableName="longitude"/>
			<http:request method="GET" doc:name="Request" doc:id="58a93466-3817-414e-a888-9f6342d70462" config-ref="HTTP_Request_configuration" url="#[p('openMeteoApi.baseUrl') ++ '?latitude=' ++ vars.latitude ++ '&amp;longitude=' ++ vars.longitude ++ '&amp;hourly=temperature_2m']"/>
			<logger level="INFO" doc:name="Logger" doc:id="b97147b0-2376-4aaf-aed4-58db82e261bf" message="Successfully Fetched Events" category="com.demo.pub_sub_demo.pub_flow_temperature.#1"/>
			<ee:transform doc:name="Transform Message" doc:id="ada3574b-5fc8-45c4-b29b-ff7dc53e851e">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
var temperatures = payload.hourly.temperature_2m
var times = payload.hourly.time
---
{
    data: (temperatures zip times)
        filter ((tempTime) -> tempTime[0] as Number < 5)
        map ((tempTime) -> {
        	city: vars.cityName,
            temperature: tempTime[0] default 999,
            time: tempTime[1] default "",
            
        })
        }


 ]]></ee:set-payload>
			</ee:message>
		</ee:transform>
			<ee:transform doc:name="Transform Message" doc:id="aa6d93c1-8ec4-4e70-88ec-ba55c8f39e24" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	body: write(payload.data,"application/json")
}]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<sqs:send-message doc:name="Send message" doc:id="4abaf422-3c73-40f7-bf3c-5d8e6515cb9a" config-ref="Amazon_SQS_Configuration" queueUrl="https://sqs.eu-north-1.amazonaws.com/843981437160/temperatureAlerts"/>
			<logger level="INFO" doc:name="Logger" doc:id="cd3006eb-8bcd-47e1-8105-a340b106d05e" message="#[payload]" category="com.demo.pub_sub_demo.pub_flow_temperature.#2"/>
		</foreach>
		<error-handler ref="commonsError_Handler" />
	</flow>
	<flow name="sub_Flow" doc:id="49f4fe9b-72c0-4730-b552-ccafe1f638c0">
		<sqs:receivemessages doc:name="Receive messages" doc:id="fcd43f9b-4c28-4bf5-bb12-221b73e5ea2c" config-ref="Amazon_SQS_Configuration" queueUrl="https://sqs.eu-north-1.amazonaws.com/843981437160/temperatureAlerts"/>
		<logger level="INFO" doc:name="Logger" doc:id="ce5383f0-2b48-426f-a72e-7551b514e8c2" message="#[payload]" category="com.demo.pub_sub_demo.sub_Flow.#1"/>
		<ee:transform doc:name="Transform Message" doc:id="60bb81f8-119c-438f-ab25-21ce08d55ffa" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var jsonPayload = read(payload, "application/json")
---
jsonPayload map ((item) -> {
                city: item.city as String,
                temperature: item.temperature as Number
            })]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<foreach doc:name="For Each" doc:id="c6685cb5-7e44-4f94-9aa4-0d90325c4c18" collection="#[payload]">
			<db:insert doc:name="Insert" doc:id="dcf5a032-50ad-41ae-b893-fa485d369b52" config-ref="Database_Config">
				<db:sql ><![CDATA[insert into WEATHER_ALERTS (id ,city , alert_type, temperature, message, created_at)
VALUES (UUID(), :cityName ,'Temperature Alert', :temp, :msg, CURRENT_TIMESTAMP);]]></db:sql>
				<db:input-parameters ><![CDATA[#[%dw 2.0
var temp = payload.temperature as Number
var alertMessage = if (temp < 3) 
                     "There is a chance of snowstorm"
                   else if (temp >= 3 and temp < 5) 
                     "There is a chance of heavy rain today"
                   else 
                     "It's hot weather"
---
{
	cityName: payload.city,
	temp: payload.temperature,
	msg: alertMessage
}]]]></db:input-parameters>
			</db:insert>
		</foreach>
		<logger level="INFO" doc:name="Logger" doc:id="9c5e8f71-8631-4b10-9171-c8beae5e6c4e" message="Data Inserted" category="com.demo.pub_sub_demo.sub_Flow.#2"/>
		
	</flow>
</mule>
